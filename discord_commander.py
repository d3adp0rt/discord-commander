import asyncio
import discord
from discord.ext import commands
import g4f
import subprocess
import json
import re
from datetime import datetime
from typing import List, Dict, Optional
import flet as ft
import threading
import queue
import hashlib
import pickle

CONFIG_PATH = 'config.pkl'
DEFAULT_CONFIG = {
    "discord_token": "",
    "command_prefix": "!",
    "os_type": "windows",  # windows –∏–ª–∏ linux
    "g4f_model": g4f.models.gpt_4,  # –ú–æ–¥–µ–ª—å G4F
    "message_history_limit": 50,
    "dangerous_commands": [
        "rm -rf", "del /f", "format", "fdisk", "mkfs", "dd if=", 
        "shutdown", "reboot", "halt", "poweroff", "taskkill /f",
        "reg delete", "netsh", "iptables", "chmod 777", "chown",
        "wget", "curl", "powershell", "cmd", "bash", "sh"
    ],
    "auto_approve_safe": False,
    "max_command_length": 1000
}

class SecurityChecker:
    def __init__(self, dangerous_commands: List[str]):
        self.dangerous_commands = dangerous_commands
        self.suspicious_patterns = [
            r'[\|&;]',  # Pipe –∏ chain –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
            r'>\s*[/\\]',  # Redirection –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
            r'<.*>',  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ redirection
            r'\$\([^)]*\)',  # Command substitution
            r'`[^`]*`',  # Backtick execution
        ]
    
    def check_command(self, command: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
        result = {
            "safe": True,
            "warnings": [],
            "dangerous_parts": [],
            "risk_level": "low"
        }
        
        command_lower = command.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for dangerous_cmd in self.dangerous_commands:
            if dangerous_cmd.lower() in command_lower:
                result["safe"] = False
                result["dangerous_parts"].append(dangerous_cmd)
                result["warnings"].append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {dangerous_cmd}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in self.suspicious_patterns:
            if re.search(pattern, command):
                result["safe"] = False
                result["warnings"].append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if len(result["dangerous_parts"]) > 2:
            result["risk_level"] = "high"
        elif len(result["dangerous_parts"]) > 0:
            result["risk_level"] = "medium"
        
        return result

class MessageHistory:
    def __init__(self, limit: int = 50):
        self.limit = limit
        self.messages = []
    
    def add_message(self, role: str, content: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.messages.append({
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        })
        
        if len(self.messages) > self.limit:
            self._compress_history()
    
    def _compress_history(self):
        """–°–∂–∏–º–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–∞–∂–¥–æ–µ 5-–µ –∏–∑ —Å—Ç–∞—Ä—ã—Ö
        if len(self.messages) > self.limit:
            recent = self.messages[-20:]
            old_compressed = self.messages[:-20:5]  # –ö–∞–∂–¥–æ–µ 5-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.messages = old_compressed + recent
    
    def get_history(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return self.messages
    
    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é"""
        self.messages = []

class CommandExecutor:
    def __init__(self, os_type: str = "windows"):
        self.os_type = os_type
    
    def execute_command(self, command: str) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            if self.os_type == "windows":
                result = subprocess.run(
                    command, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    timeout=30
                )
            else:  # linux
                result = subprocess.run(
                    command, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    timeout=30
                )
            
            return {
                "success": True,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode
            }
        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "error": "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (30 —Å–µ–∫)"
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

class DiscordBot:
    def __init__(self, config: Dict):
        self.config = config
        self.history = MessageHistory(config.get("message_history_limit", 50))
        self.security_checker = SecurityChecker(config.get("dangerous_commands", []))
        self.executor = CommandExecutor(config.get("os_type", "windows"))
        self.pending_commands = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        
        intents = discord.Intents.default()
        intents.message_content = True
        intents.dm_messages = True
        
        self.bot = commands.Bot(
            command_prefix=config.get("command_prefix", "!"),
            intents=intents
        )
        
        self.setup_commands()
    
    def setup_commands(self):
        @self.bot.event
        async def on_ready():
            print(f'{self.bot.user} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord!')
        
        @self.bot.command(name='ask')
        async def ask_ai(ctx, *, question: str):
            """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI"""
            await ctx.send("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.history.add_message("user", question)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
                history_context = self._build_context()
                
                # –ó–∞–ø—Ä–æ—Å –∫ G4F
                response = await g4f.ChatCompletion.create_async(
                    model=self.config.get("g4f_model", g4f.models.gpt_4),
                    messages=[
                        {"role": "system", "content": f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ {self.config['os_type']}. –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø–∏—à–∏ –µ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ: COMMAND: <–∫–æ–º–∞–Ω–¥–∞>"},
                        {"role": "system", "content": f"–ò—Å—Ç–æ—Ä–∏—è: {history_context}"},
                        {"role": "user", "content": question}
                    ]
                )
                
                self.history.add_message("assistant", response)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ
                if "COMMAND:" in response:
                    await self._handle_command_response(ctx, response)
                else:
                    await ctx.send(f"ü§ñ **–û—Ç–≤–µ—Ç AI:**\n{response}")
                    
            except Exception as e:
                await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {str(e)}")
        
        @self.bot.command(name='exec')
        async def execute_command(ctx, *, command: str):
            """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é"""
            await self._execute_with_security_check(ctx, command)
        
        @self.bot.command(name='approve')
        async def approve_command(ctx, command_id: str = None):
            """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
            if command_id and command_id in self.pending_commands:
                command = self.pending_commands.pop(command_id)
                await self._execute_command_directly(ctx, command)
            else:
                await ctx.send("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        @self.bot.command(name='history')
        async def show_history(ctx):
            """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
            history = self.history.get_history()
            if not history:
                await ctx.send("üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
                return
            
            history_text = "üìù **–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
            for msg in history[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                role_icon = "üë§" if msg["role"] == "user" else "ü§ñ"
                content = msg["content"][:100] + "..." if len(msg["content"]) > 100 else msg["content"]
                history_text += f"{role_icon} {content}\n"
            
            await ctx.send(history_text)
        
        @self.bot.command(name='clear')
        async def clear_history(ctx):
            """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"""
            self.history.clear()
            await ctx.send("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
    
    async def _handle_command_response(self, ctx, response: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç AI —Å –∫–æ–º–∞–Ω–¥–æ–π"""
        lines = response.split('\n')
        commands = []
        text_parts = []
        
        for line in lines:
            if line.strip().startswith('COMMAND:'):
                command = line.replace('COMMAND:', '').strip()
                commands.append(command)
            else:
                text_parts.append(line)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if text_parts:
            text_response = '\n'.join(text_parts).strip()
            if text_response:
                await ctx.send(f"ü§ñ **–û—Ç–≤–µ—Ç AI:**\n{text_response}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        for command in commands:
            await self._execute_with_security_check(ctx, command)
    
    async def _execute_with_security_check(self, ctx, command: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if len(command) > self.config.get("max_command_length", 1000):
            await ctx.send("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_result = self.security_checker.check_command(command)
        
        if security_result["safe"] or self.config.get("auto_approve_safe", False):
            await self._execute_command_directly(ctx, command)
        else:
            await self._request_approval(ctx, command, security_result)
    
    async def _request_approval(self, ctx, command: str, security_result: Dict):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        command_id = hashlib.md5(command.encode()).hexdigest()[:8]
        self.pending_commands[command_id] = command
        
        risk_colors = {"low": "üü¢", "medium": "üü°", "high": "üî¥"}
        risk_color = risk_colors.get(security_result["risk_level"], "üü°")
        
        warning_text = f"{risk_color} **–í–ù–ò–ú–ê–ù–ò–ï! –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n"
        warning_text += f"üìã **–ö–æ–º–∞–Ω–¥–∞:** `{command}`\n"
        warning_text += f"‚ö†Ô∏è **–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {security_result['risk_level']}\n"
        
        if security_result["warnings"]:
            warning_text += "üö® **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in security_result["warnings"]:
                warning_text += f"‚Ä¢ {warning}\n"
        
        warning_text += f"\nüîß –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!approve {command_id}`"
        
        await ctx.send(warning_text)
    
    async def _execute_command_directly(self, ctx, command: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é"""
        await ctx.send(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: `{command}`")
        
        result = self.executor.execute_command(command)
        
        if result["success"]:
            output = ""
            if result["stdout"]:
                output += f"üì§ **–í—ã–≤–æ–¥:**\n```\n{result['stdout']}\n```\n"
            if result["stderr"]:
                output += f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n```\n{result['stderr']}\n```\n"
            if result["returncode"] != 0:
                output += f"üî¥ **–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞:** {result['returncode']}\n"
            
            if not output:
                output = "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤—ã–≤–æ–¥–∞
            if len(output) > 1800:
                output = output[:1800] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"
            
            await ctx.send(output)
        else:
            await ctx.send(f"‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n```\n{result['error']}\n```")
    
    def _build_context(self) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        history = self.history.get_history()
        if not history:
            return ""
        
        context = ""
        for msg in history[-5:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg["role"] == "user" else "AI"
            content = msg["content"][:200] + "..." if len(msg["content"]) > 200 else msg["content"]
            context += f"{role}: {content}\n"
        
        return context
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        token = self.config.get("discord_token")
        if not token:
            raise ValueError("Discord —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        self.bot.run(token)

class BotGUI:
    def __init__(self):
        self.config = self._load_config()
        self.bot_instance = None
        self.bot_thread = None
        self.command_queue = queue.Queue()

    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            with open(CONFIG_PATH, 'rb') as f:
                config = pickle.load(f)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                for key, value in DEFAULT_CONFIG.items():
                    if key not in config:
                        config[key] = value
                return config
        except FileNotFoundError:
            return DEFAULT_CONFIG.copy()

    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        with open(CONFIG_PATH, 'wb') as f:
            pickle.dump(self.config, f)
    
    def main(self, page: ft.Page):
        page.title = "Discord Commander Bot"
        page.theme_mode = ft.ThemeMode.LIGHT
        page.window_width = 900
        page.window_height = 1000
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        self.status_text = ft.Text("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", color=ft.colors.RED)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.token_field = ft.TextField(
            label="Discord Bot Token",
            value=self.config.get("discord_token", ""),
            password=True,
            width=400
        )
        
        self.prefix_field = ft.TextField(
            label="–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥",
            value=self.config.get("command_prefix", "!"),
            width=100
        )
        
        self.os_dropdown = ft.Dropdown(
            label="–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
            value=self.config.get("os_type", "windows"),
            options=[
                ft.dropdown.Option("windows", "Windows"),
                ft.dropdown.Option("linux", "Linux")
            ],
            width=200
        )
        
        self.provider_dropdown = ft.Dropdown(
            label="G4F Provider",
            value=self.config.get("g4f_model", g4f.models.gpt_4),
            options=[
                ft.dropdown.Option(g4f.models.gpt_4, g4f.models.gpt_4.name),
                ft.dropdown.Option(g4f.models.gpt_4_1_mini, g4f.models.gpt_4_1_mini.name),
                ft.dropdown.Option(g4f.models.llama_2_70b, g4f.models.llama_2_70b.name),
                ft.dropdown.Option(g4f.models.llama_3_1_405b, g4f.models.llama_3_1_405b.name),
            ],
            width=200
        )
        
        self.history_limit_field = ft.TextField(
            label="–õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏",
            value=str(self.config.get("message_history_limit", 50)),
            width=150
        )
        
        self.auto_approve_checkbox = ft.Checkbox(
            label="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            value=self.config.get("auto_approve_safe", False)
        )
        
        # –°–ø–∏—Å–æ–∫ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.dangerous_commands_field = ft.TextField(
            label="–û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
            value=", ".join(self.config.get("dangerous_commands", [])),
            multiline=True,
            min_lines=3,
            max_lines=5,
            width=500
        )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.start_button = ft.ElevatedButton(
            "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
            icon=ft.icons.PLAY_ARROW,
            on_click=self.start_bot,
            bgcolor=ft.colors.GREEN
        )
        
        self.stop_button = ft.ElevatedButton(
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞",
            icon=ft.icons.STOP,
            on_click=self.stop_bot,
            bgcolor=ft.colors.RED,
            disabled=True
        )
        
        self.save_button = ft.ElevatedButton(
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            icon=ft.icons.SAVE,
            on_click=self.save_settings
        )
        
        # –õ–æ–≥
        self.log_text = ft.TextField(
            label="–õ–æ–≥ –±–æ—Ç–∞",
            multiline=True,
            min_lines=10,
            max_lines=10,
            width=800,
            read_only=True
        )
        
        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        page.add(
            ft.Container(
                content=ft.Column([
                    ft.Row([
                        ft.Text("Discord Commander Bot", size=24, weight=ft.FontWeight.BOLD),
                        self.status_text
                    ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                    
                    ft.Divider(),
                    
                    ft.Text("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", size=18, weight=ft.FontWeight.BOLD),
                    ft.Row([self.token_field]),
                    ft.Row([self.prefix_field, self.os_dropdown, self.provider_dropdown]),
                    ft.Row([self.history_limit_field, self.auto_approve_checkbox]),
                    
                    ft.Divider(),
                    
                    ft.Text("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", size=18, weight=ft.FontWeight.BOLD),
                    ft.Row([self.dangerous_commands_field]),
                    
                    ft.Divider(),
                    
                    ft.Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", size=18, weight=ft.FontWeight.BOLD),
                    ft.Row([self.start_button, self.stop_button, self.save_button]),
                    
                    ft.Divider(),
                    
                    ft.Text("–õ–æ–≥", size=18, weight=ft.FontWeight.BOLD),
                    self.log_text
                ], spacing=10),
                padding=20
            )
        )
    
    def start_bot(self, e):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.save_settings(None)
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            self.bot_instance = DiscordBot(self.config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.bot_thread = threading.Thread(target=self._run_bot_thread)
            self.bot_thread.daemon = True
            self.bot_thread.start()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.status_text.value = "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
            self.status_text.color = ft.colors.GREEN
            self.start_button.disabled = True
            self.stop_button.disabled = False
            self.log_text.value += f"[{datetime.now().strftime('%H:%M:%S')}] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n"
            
            self.start_button.page.update()
            
        except Exception as ex:
            self.log_text.value += f"[{datetime.now().strftime('%H:%M:%S')}] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(ex)}\n"
            self.start_button.page.update()
    
    def _run_bot_thread(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.bot_instance.run()
        except Exception as e:
            self.log_text.value += f"[{datetime.now().strftime('%H:%M:%S')}] –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}\n"
    
    def stop_bot(self, e):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        if self.bot_instance:
            try:
                asyncio.run(self.bot_instance.bot.close())
            except:
                pass
            self.bot_instance = None
        
        self.status_text.value = "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        self.status_text.color = ft.colors.RED
        self.start_button.disabled = False
        self.stop_button.disabled = True
        self.log_text.value += f"[{datetime.now().strftime('%H:%M:%S')}] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
        
        self.stop_button.page.update()
    
    def save_settings(self, e):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            self.config["discord_token"] = self.token_field.value
            self.config["command_prefix"] = self.prefix_field.value
            self.config["os_type"] = self.os_dropdown.value
            self.config["g4f_model"] = self.provider_dropdown.value
            self.config["message_history_limit"] = int(self.history_limit_field.value)
            self.config["auto_approve_safe"] = self.auto_approve_checkbox.value
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            dangerous_commands = [cmd.strip() for cmd in self.dangerous_commands_field.value.split(",")]
            self.config["dangerous_commands"] = [cmd for cmd in dangerous_commands if cmd]
            
            self._save_config()
            
            if e:  # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∫–Ω–æ–ø–∫–æ–π
                self.log_text.value += f"[{datetime.now().strftime('%H:%M:%S')}] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"
                self.save_button.page.update()
                
        except Exception as ex:
            if e:
                self.log_text.value += f"[{datetime.now().strftime('%H:%M:%S')}] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(ex)}\n"
                self.save_button.page.update()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    gui = BotGUI()
    ft.app(target=gui.main)

if __name__ == "__main__":
    main()
